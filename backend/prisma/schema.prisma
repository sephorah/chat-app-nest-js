// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id  String   @id @default(uuid())
  username String  @db.VarChar(20) @unique
  email String  @db.VarChar(50)
  password  String
  createdAt DateTime  @default(now())
  profile Profile?
}

model Profile {
  id  String   @id @default(uuid())
  name String @db.VarChar(50)
  photoUrl String?
  bio String  @db.VarChar(200)
  memberships  ChatroomMembership[]
  messages Message[]

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chatroom {
  id  String   @id @default(uuid())
  name  String  @db.VarChar(50)
  createdAt DateTime  @default(now())
  memberships  ChatroomMembership[]
  messages Message[]
  photoUrl String?
}

model ChatroomMembership {
  id String @id @default(uuid())

  chatroomId String
  chatroom Chatroom @relation(fields: [chatroomId], references: [id])

  profileId String
  profile Profile @relation(fields: [profileId], references: [id])

  joinedAt DateTime @default(now())
  role String? // e.g., 'admin', 'member'
  
  @@unique([chatroomId, profileId])
}

model Message {
  id  String   @id @default(uuid())
  createdAt DateTime  @default(now())
  body String @db.Text
  read Boolean @default(false)

  senderId String
  sender Profile @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatroomId String
  chatroom Chatroom @relation(fields: [chatroomId], references: [id], onDelete: Cascade)
}